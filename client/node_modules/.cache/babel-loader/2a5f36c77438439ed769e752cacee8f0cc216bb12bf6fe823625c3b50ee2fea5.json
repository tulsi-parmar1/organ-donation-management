{"ast":null,"code":"import { createOrder } from \"./FetchApi\";\nexport const fetchData = async (cartListProduct, dispatch) => {\n  dispatch({\n    type: \"loading\",\n    payload: true\n  });\n  try {\n    let responseData = await cartListProduct();\n    if (responseData && responseData.Products) {\n      setTimeout(function () {\n        dispatch({\n          type: \"cartProduct\",\n          payload: responseData.Products\n        });\n        dispatch({\n          type: \"loading\",\n          payload: false\n        });\n      }, 1000);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchbrainTree = async (getBrainTreeToken, setState) => {\n  try {\n    let responseData = await getBrainTreeToken();\n    if (responseData && responseData) {\n      setState({\n        clientToken: responseData.clientToken,\n        success: responseData.success\n      });\n      console.log(responseData);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const pay = async (data, dispatch, state, setState, getPaymentProcess, totalCost, history) => {\n  console.log(state);\n  if (!state.address) {\n    setState({\n      ...state,\n      error: \"Please provide your address\"\n    });\n  } else if (!state.phone) {\n    setState({\n      ...state,\n      error: \"Please provide your phone number\"\n    });\n  } else {\n    let nonce;\n    state.instance.requestPaymentMethod().then(data => {\n      dispatch({\n        type: \"loading\",\n        payload: true\n      });\n      nonce = data.nonce;\n      let paymentData = {\n        amountTotal: totalCost(),\n        paymentMethod: nonce\n      };\n      getPaymentProcess(paymentData).then(async res => {\n        if (res) {\n          let orderData = {\n            allProduct: JSON.parse(localStorage.getItem(\"cart\")),\n            user: JSON.parse(localStorage.getItem(\"jwt\")).user._id,\n            amount: res.transaction.amount,\n            transactionId: res.transaction.id,\n            address: state.address,\n            phone: state.phone\n          };\n          try {\n            let resposeData = await createOrder(orderData);\n            if (resposeData.success) {\n              localStorage.setItem(\"cart\", JSON.stringify([]));\n              dispatch({\n                type: \"cartProduct\",\n                payload: null\n              });\n              dispatch({\n                type: \"cartTotalCost\",\n                payload: null\n              });\n              dispatch({\n                type: \"orderSuccess\",\n                payload: true\n              });\n              setState({\n                clientToken: \"\",\n                instance: {}\n              });\n              dispatch({\n                type: \"loading\",\n                payload: false\n              });\n              return history.push(\"/\");\n            } else if (resposeData.error) {\n              console.log(resposeData.error);\n            }\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }).catch(error => {\n      console.log(error);\n      setState({\n        ...state,\n        error: error.message\n      });\n    });\n  }\n};","map":{"version":3,"names":["createOrder","fetchData","cartListProduct","dispatch","type","payload","responseData","Products","setTimeout","error","console","log","fetchbrainTree","getBrainTreeToken","setState","clientToken","success","pay","data","state","getPaymentProcess","totalCost","history","address","phone","nonce","instance","requestPaymentMethod","then","paymentData","amountTotal","paymentMethod","res","orderData","allProduct","JSON","parse","localStorage","getItem","user","_id","amount","transaction","transactionId","id","resposeData","setItem","stringify","push","catch","err","message"],"sources":["C:/Personal Disc/KSHITIJ/Webdev_learn/OrganEase-main/OrganEase-main/client/src/components/shop/order/Action.js"],"sourcesContent":["import { createOrder } from \"./FetchApi\";\n\nexport const fetchData = async (cartListProduct, dispatch) => {\n  dispatch({ type: \"loading\", payload: true });\n  try {\n    let responseData = await cartListProduct();\n    if (responseData && responseData.Products) {\n      setTimeout(function () {\n        dispatch({ type: \"cartProduct\", payload: responseData.Products });\n        dispatch({ type: \"loading\", payload: false });\n      }, 1000);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchbrainTree = async (getBrainTreeToken, setState) => {\n  try {\n    let responseData = await getBrainTreeToken();\n    if (responseData && responseData) {\n      setState({\n        clientToken: responseData.clientToken,\n        success: responseData.success,\n      });\n      console.log(responseData);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const pay = async (\n  data,\n  dispatch,\n  state,\n  setState,\n  getPaymentProcess,\n  totalCost,\n  history\n) => {\n  console.log(state);\n  if (!state.address) {\n    setState({ ...state, error: \"Please provide your address\" });\n  } else if (!state.phone) {\n    setState({ ...state, error: \"Please provide your phone number\" });\n  } else {\n    let nonce;\n    state.instance\n      .requestPaymentMethod()\n      .then((data) => {\n        dispatch({ type: \"loading\", payload: true });\n        nonce = data.nonce;\n        let paymentData = {\n          amountTotal: totalCost(),\n          paymentMethod: nonce,\n        };\n        getPaymentProcess(paymentData)\n          .then(async (res) => {\n            if (res) {\n              let orderData = {\n                allProduct: JSON.parse(localStorage.getItem(\"cart\")),\n                user: JSON.parse(localStorage.getItem(\"jwt\")).user._id,\n                amount: res.transaction.amount,\n                transactionId: res.transaction.id,\n                address: state.address,\n                phone: state.phone,\n              };\n              try {\n                let resposeData = await createOrder(orderData);\n                if (resposeData.success) {\n                  localStorage.setItem(\"cart\", JSON.stringify([]));\n                  dispatch({ type: \"cartProduct\", payload: null });\n                  dispatch({ type: \"cartTotalCost\", payload: null });\n                  dispatch({ type: \"orderSuccess\", payload: true });\n                  setState({ clientToken: \"\", instance: {} });\n                  dispatch({ type: \"loading\", payload: false });\n                  return history.push(\"/\");\n                } else if (resposeData.error) {\n                  console.log(resposeData.error);\n                }\n              } catch (error) {\n                console.log(error);\n              }\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      })\n      .catch((error) => {\n        console.log(error);\n        setState({ ...state, error: error.message });\n      });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}